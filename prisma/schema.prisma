// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String
  password    String
  department  Department
  role        Role     @default(USER)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  accounts    Account[]
  sessions    Session[]
  indicators  Indicator[]
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Indicator {
  id          String     @id @default(cuid())
  userId      String
  department  Department
  name        String
  value       Float
  target      Float
  unit        String?
  description String?
  date        DateTime   @default(now())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("indicators")
}

model Goal {
  id          String     @id @default(cuid())
  department  Department
  name        String
  target      Float
  current     Float      @default(0)
  unit        String
  description String?
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("goals")
}

model NotificationConfig {
  id              String   @id @default(cuid())
  emailEnabled    Boolean  @default(true)
  whatsappEnabled Boolean  @default(false)
  recipients      String[] // Array of email addresses
  whatsappNumbers String[] // Array of WhatsApp numbers
  sendTime        String   // Time to send daily reports (HH:MM format)
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("notification_configs")
}

enum Department {
  COMERCIAL
  LOGISTICA
  COMPRAS
  FINANCEIRO
  TI
  DIRETORIA
}

enum Role {
  USER
  ADMIN
  DIRECTOR
}
